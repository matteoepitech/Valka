{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Valka Language Documentation \ud83d\udc4b","text":"<p>Valka is an easy-to-use programming language inspired by the syntax of C and Rust.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Getting Started</li> <li>Syntax</li> <li>Examples</li> <li>FAQ</li> </ul> <p>This project is still under development. By the way, it\u2019s maintained by one and only one person, who\u2019s developing it in their spare time.</p>"},{"location":"examples/","title":"Some Examples","text":""},{"location":"examples/#simple-counter","title":"Simple Counter","text":"<pre><code>function &lt;i32&gt; main()\n{\n    var &lt;i32&gt; counter = 0;\n\n    for (var &lt;i32&gt; i = 0; i &lt; 10; i = i + 1) {\n        counter = counter + 1;\n        put_nbr(counter); // not defined in this example\n        putchar(10);  // Newline character\n    }\n    return 0;\n}\n</code></pre>"},{"location":"examples/#fibonacci-sequence","title":"Fibonacci Sequence","text":"<pre><code>function &lt;i32&gt; main(&lt;i32&gt; argc)\n{\n    var &lt;i32&gt; old_result = 0;\n    var &lt;i32&gt; result = 1;\n    var &lt;i32&gt; tmp = 0;\n\n    for (var &lt;i32&gt; i = 0; i &lt; argc; i = i + 1) {\n        tmp = result;\n        result = result + old_result;\n        old_result = tmp;\n        put_nbr(result); // not defined in this example\n        putchar(10);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"faq/","title":"FAQ","text":"<ol> <li> <p>There is any POO ?</p> <p>Answer: Not for the moment</p> </li> <li> <p>Can I malloc, free, realloc ?</p> <p>Answer: Since it's using the libC then yes, you can!</p> </li> <li> <p>Can I make static arrays ?</p> <p>Answer: Yes!</p> </li> </ol> <p>I know there are not many features yet, but it takes time to implement all functionality... Be patient..</p>"},{"location":"getting_started/","title":"Getting Started with Valka","text":""},{"location":"getting_started/#installation","title":"Installation","text":"<p>Clone the Valka repository:</p> <pre><code>git clone https://github.com/yourusername/valka.git\ncd valka\n</code></pre>"},{"location":"getting_started/#build-the-compiler","title":"Build the compiler","text":"<p>Use the appropriate script depending on your operating system.</p> <pre><code>chmod +x build_linux_mac.sh\n./build_linux_mac.sh\n</code></pre> <pre><code>chmod +x build_linux_mac.sh\n./build_windows.sh\n</code></pre>"},{"location":"getting_started/#create-your-first-program","title":"Create your first program","text":"<p>Valka is using libC so we can use <code>puts</code> to make our first print.</p> <p>Create a <code>file.vk</code> and put this:</p> <pre><code>function &lt;i32&gt; puts(&lt;char*&gt; string);\n\nfunction &lt;i32&gt; main()\n{\n    puts(\"Hello World!\");\n    return 0;\n}\n</code></pre> <p>Compile it using the binary <code>valkac</code> or <code>valkac.exe</code> compiled earlier.</p> <pre><code>./valkac file.vk\n</code></pre> <p>And run it!</p> <pre><code>./a.out\n</code></pre>"},{"location":"syntax/","title":"Language Syntax","text":""},{"location":"syntax/#overview","title":"Overview","text":"<p>This document describes the syntax and structure of Valka. The language features C-like syntax with explicit type annotations.</p>"},{"location":"syntax/#basic-structure","title":"Basic Structure","text":""},{"location":"syntax/#comments","title":"Comments","text":"<pre><code>// Single line comments (assumed based on C-like syntax)\n</code></pre>"},{"location":"syntax/#program-entry-point","title":"Program Entry Point","text":"<p>Every program must have a <code>main</code> function that serves as the entry point:</p> <pre><code>function &lt;i32&gt; main()\n{\n    // program code here\n    return 0;\n}\n</code></pre>"},{"location":"syntax/#data-types","title":"Data Types","text":""},{"location":"syntax/#primitive-types","title":"Primitive Types","text":"<ul> <li><code>&lt;float&gt;</code> - 64-bit signed float</li> <li><code>&lt;i32&gt;</code> - 32-bit signed integer</li> <li><code>&lt;char&gt;</code> - 8-bit Character</li> <li><code>&lt;bool&gt;</code> - 1-bit Bool</li> <li><code>&lt;void&gt;</code> - Void type (no return value)</li> </ul>"},{"location":"syntax/#variable-declarations","title":"Variable Declarations","text":"<p>Variables are declared using the <code>var</code> keyword followed by the type and identifier:</p> <pre><code>var &lt;type&gt; identifier = value;\n</code></pre>"},{"location":"syntax/#examples","title":"Examples:","text":"<pre><code>var &lt;i32&gt; counter = 0;\nvar &lt;i32&gt; result = 1;\nvar &lt;char*&gt; message = \"Hello World\";\n</code></pre>"},{"location":"syntax/#structures","title":"Structures","text":"<p>A struct can contains every other type, pointer, array, normal variables.</p> <pre><code>struct my_struct {\n    var &lt;i32&gt; my_int,\n    var &lt;float&gt; my_float\n}\n</code></pre> <p>And field can be accessed by doing this:</p> <pre><code>my_struct.my_int;\nmy_struct.my_float;\n</code></pre>"},{"location":"syntax/#arrays","title":"Arrays","text":"<p>An array can be done with any type of variables/structures and can contains pointer and multi-dimensionnal arrays. This will init an array called my_array with no value intialized. (Of size 10 (10 * sizeof(int)))</p> <pre><code>var &lt;i32[10]&gt; my_array;\n</code></pre> <pre><code>var &lt;i32[10][10]&gt; my_array_double;\n</code></pre> <pre><code>var &lt;struct my_struct[10]&gt; my_struct_array;\n</code></pre>"},{"location":"syntax/#function-declarations","title":"Function Declarations","text":"<p>Functions are declared using the <code>function</code> keyword with explicit return type annotation:</p> <pre><code>function &lt;return_type&gt; function_name(&lt;parameter_type&gt; parameter_name, ...)\n{\n    // function body\n    return value; // if not void\n}\n</code></pre>"},{"location":"syntax/#function-examples","title":"Function Examples:","text":""},{"location":"syntax/#void-function-no-return-value","title":"Void Function (No Return Value)","text":"<pre><code>function &lt;void&gt; my_function(&lt;i32&gt; parameter)\n{\n    // function body\n}\n</code></pre>"},{"location":"syntax/#function-with-return-value","title":"Function with Return Value","text":"<pre><code>function &lt;i32&gt; add_numbers(&lt;i32&gt; a, &lt;i32&gt; b)\n{\n    return a + b;\n}\n</code></pre>"},{"location":"syntax/#function-with-multiple-parameters","title":"Function with Multiple Parameters","text":"<pre><code>function &lt;i32&gt; calculate(&lt;i32&gt; x, &lt;i32&gt; y, &lt;i32&gt; z)\n{\n    return x + y * z;\n}\n</code></pre>"},{"location":"syntax/#control-flow","title":"Control Flow","text":""},{"location":"syntax/#for-loops","title":"For Loops","text":"<pre><code>for (var &lt;i32&gt; i = 0; i &lt; limit; i = i + 1) {\n    // loop body\n}\n</code></pre>"},{"location":"syntax/#key-points","title":"Key Points:","text":"<ul> <li>For init variable are usable even after the loop. So you can get the final index for example.</li> <li>Increment uses assignment: <code>i = i + 1</code> (no <code>++</code> operator at the moment)</li> <li>Condition uses standard comparison operators</li> </ul>"},{"location":"syntax/#while-loops","title":"While Loops","text":"<pre><code>while (condition) {\n    // loop body\n}\n</code></pre>"},{"location":"syntax/#conditional-statements","title":"Conditional Statements","text":"<pre><code>if (condition) {\n    // if body\n}\n</code></pre> <p>With else :</p> <pre><code>if (condition) {\n    // if body\n} else {\n    // else body\n}\n</code></pre>"},{"location":"syntax/#operators","title":"Operators","text":""},{"location":"syntax/#arithmetic-operators","title":"Arithmetic Operators","text":"<ul> <li><code>+</code> - Addition</li> <li><code>-</code> - Subtraction</li> <li><code>*</code> - Multiplication</li> <li><code>/</code> - Division (integer division)</li> <li><code>%</code> - Modulo</li> </ul>"},{"location":"syntax/#comparison-operators","title":"Comparison Operators","text":"<ul> <li><code>==</code> - Equal to</li> <li><code>!=</code> - Not equal to</li> <li><code>&lt;</code> - Less than</li> <li><code>&gt;</code> - Greater than</li> <li><code>&lt;=</code> - Less than or equal to</li> <li><code>&gt;=</code> - Greater than or equal to</li> </ul>"},{"location":"syntax/#assignment-operator","title":"Assignment Operator","text":"<ul> <li><code>=</code> - Assignment</li> </ul>"},{"location":"syntax/#syntax-rules-summary","title":"Syntax Rules Summary","text":"<ol> <li>Function declarations must use <code>function</code> keyword with explicit type annotations</li> <li>Variable declarations must use <code>var</code> keyword with type annotation</li> <li>Braces <code>{}</code> are required for function bodies and control structures</li> <li>Semicolons <code>;</code> are NOT required to terminate statements but recommended</li> <li>Type annotations use angle bracket notation: <code>&lt;type&gt;</code></li> <li>Return statements are required for non-void functions</li> <li>Loop increments use full assignment syntax: <code>i = i + 1</code></li> </ol>"}]}